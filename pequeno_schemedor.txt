El Piqueño Schemedor

por: Daniel P. Friedman y Matthias Felleisen
Traducido por: Zackary Hess




Diez Mandamientos

1-
Cuando estas usando recursion en una lista de atomos, `lat`, preguntas dos cosas sobre eso: `(null? lat)` y `else`.
Cuando estas usando recursion en un numero, `n`, preguntas dos cosas sobre eso: `(zero? n)` y `else`.
Cuando estas usando recusion en una lista de expresiones-S, `l`, preguntas tres cosas sobre eso: `(null? l)`, `(atom? (car l))` y `else`.

2-
Usas `cons` para construir listas.

3-
Cuando estas construyendo listas, descrubes la primer elemento typical, y `cons` eso con lo recusion natural.

4-
Cuando estas usando recusion, debes cambiar por lo menos un argumento cada vez.
Cuando estas usando recusion en un lista de atomos, `lat`, usas `(cdr lat)`
Cuando estas usando recusion en un numero, `n`, usas `(sub1 n)`.
Y cuando estas usando recusion en una lista de expresiones-S, `l`, usas `(car l)` y `(cdr l)` sino `(null? l)` tampoco `(atom? (car l))` son verdad.

Cada vez es necesario que eso es cambiando mas cerca el terminación.
Necesitas probar lo argumento cambiando cada vez por lo condicion de terminación:
cuando usando `cdr`, el condicion de terminación es `null?` y
cuando usando `sub1`, el condicion de terminación es `zero?`.

5-
Cuando construyendo un valor con `+`, siempre usas 0 por el valor de la linea de terminación, porque agregando con 0 no cambia el valor.
Cuando construyendo un valor con `*`, siempre usas 1 por el valor de la linea de terminación, porque multiplicando con 1 no cambia el valor.
Cuando construyendo un valor con `cons`, siempre considerar `()` por el valor de la linea de terminación.

6-
Simplificar un función solo despues de es correcto.

7-
Usas recursion en los partes de tiene mismo forma.
* en las sublistas de listas.
* en los subexpresiónes de un expresión.

8-
Usas mas funciónes to abstractar desde representaciónes.

9-
Usas nuevas funciónes para abstractar los patrones comones.

10-
Creas funciónes para recoger mas de uno valor en una vez.


Las Cinca Reglas

La Regla de Car
   La primitiva `car` tiene definición solo para listas que no son vacias.

La Regla de Cdr
   La primitiva `cdr` tiene definición solo para listas que no son vacias. El `cdr` de una lista que no es vacia siempre es otra lista.

La Regla de Cons
   La primitiva `cons` toma dos argumentos. La segunda argumento por `cons` debe ser una lista. El resulto es una lista.

La Regla de Null?
   La primitiva `null?` tiene definition solo para listas.

La Regla de Eq?
   La primitiva `eq?` toma dos argumentos. Cada necesita ser un atom, y no pueden ser numero.



Guida para la lectora
      Debe leer despacio, y con cuidado. Debe tener por los menos dos descansos durante leyendo, no leas todo en un vez. Lee los capitulos en lo correcto orden. Si no entiende un capitulo entera, va a entender lo siguiente menos. Cada pregunta es mas dificil. Debe tener poder responder a las mas facil antes de hace los mas dificiles.
      Eso libro es una conversacion sobre programas interesantes. Si puedes, debes hacer los ejemplos durante leyendo. Software para hacer la idoma Scheme es muy disponible. Son pocos diferencias en cada Scheme, pero todos son basicamente mismo en todo mundo. Para usar Scheme por eso libro, necesita definar los functiones `atom?`, `sub1`, y `add1`. Aca es un definición por `atom?`.
```
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x )))))
```
     Para saber si tu Scheme tiene lo corecto definición de `atom?`, proba `(atom? (quote ()))`. debe resultar en `#f`. Eso libro tambien puede funciar con un lisp mas moderna, como Common Lisp. Para funciar con Lisp, puede crear la función `atom?` como asi:
```
(defun atom? (x)
  (not (listp x)))
```
y las porgramas quizas necesita estar modificada un poco.
  En capitulo 4 creamos los basicos de aritmetico usando los operaciónes `add1`, `sub1`, y `zero?`. Necesitas crear `add1` y `sub1` porque no existe por defaulto en scheme.
  Eso Libro no tiene definiciónes formales. Puedes crear su proprio definición, y como asi es mas facil recuerdar y entender. Pero debes saber y entender los Reglas Y Mandamientos antes de pasar por ellos. La estrategia para aprender Scheme es en saber los patrones. Los Mandamientos son patrones que ya veaste. En el principio del libro los conceptos son sincilla, y mas tarde expandimos en ellos. Deben saber tambien que todo en eso libro si es Scheme, pero tambien Scheme tiene mas que pueden explicar en eso libro introductoria. Despues de estas maestro de eso libro, puedes leer y entender otro libros mas comprehensivos sobre Scheme.
  Estas lista iniciar. Buena suerte! Esperamos que puedes disfrutar los desafíos en los siguente paginas.





Capitulo 1: Jugetes

-----------------

Es verdad que eso es un atomo?
  `atom`

Sí,
   porque `atom` es un hilo de caracteres iniciando con la letra `a`.

-----------------

Es verdad que eso es un atomo?
  `pavo`

Sí,
   porque `pavo` es un hilo de caracteres iniciando con un letra.

-----------------

Es verdad que eso es un atomo?
   `1492`

Sí,
   porque `1492` es un hilo de digitos.

-----------------

Es verdad que eso es un atomo?
   `u`

Sí,
   porque `u` es un hilo de un caracter, que es un letra.

-----------------

Es verdad que eso es un atomo?
   `*abc$`
   
Sí,
   porque `*abc$` es un hilo de caracteres, iniciando con un letra o caractere especial otro de izquierda "(" o derecho ")" parentesis.

-----------------

Es verdad que eso es una lista?
   `(atomo)`

Sí,
   porque `(atomo)` es un atomo adentro de parentesis.

-----------------

Es verdad que eso es una lista?
   `(atomo pavo o)`

Sí,
   porque eso es un coleccion de atomos adentro de parentesis.

-----------------

Es verdad que eso es una lista?
   `(atomo pavo) o`

No,
   porque eso es actualmente dos expresiones-S no adentro de parentesis. El primer es una lista de dos atomos, y la segunda es un atomo.

-----------------

Es verdad que eso es una lista?
   `((atomo pavo) o)`

Sí,
   porque los dos expressiones-S ahora son adentro de parentesis.

-----------------

Es verdad que eso es un expresión-S?
   `xyz`

Sí,
   porque todos atomos son expresiónes-S.

-----------------

Es verdad que eso es un expresión-S?
   `(x y z)`

Sí,
   porque es una lista.

-----------------

Es verdad que eso es un expresión-S?
   `((x y) z)`

Sí,
   porque todas listas son expresiónes-S.

-----------------

Es verdad que eso es una lista?
   `(como estas haciendo hasta ahora)`

Sí,
   porque eso es una colección de expresiónes-S adentro de parentesis.

-----------------

Cuantos expresiónes-S son adentro la lista `(como estas haciendo hasta ahora)` y que son?

Cinco,
        `como`, `estas`, `haciendo`, `hasta`, y, `ahora`.

-----------------

Es verdad que eso es una lista?
   `(((como) estas) ((haciendo) (hasta)) ahora)`

Sí,
    porque es un colección de expreciónes adentro de parentesis.

-----------------

Cuantos expresiónes-S son adentro la lista
   `(((como) estas) ((haciendo) (hasta)) ahora)`
y que son?

Tres,
     `((como) estas)`, `((haciendo) (hasta))`, y `ahora`.

-----------------

Es verdad que esa es una lista?
   `()`

Sí,
   porque eso contiene cero expresiónes adentro de parentesis. Eso especial tipo de expresión-S se llama el null (o vacia) lista.

-----------------

Es verdad que eso es un atomo?
   `()`

No,
   porque `()` es una lista.

-----------------

Es verdad que eso es una lista?
   `(()()()())`

Sí,
    porque es un colección de expresiónes-S adentro de parentesis.

-----------------

Que es el `car` de `l` cuando `l` es el argumento `(a b c)`?

`a`,
    porque `a` es el primer atomo de esta lista.

-----------------

Que es el `car` de `l` cuando `l` es `((a b c) x y z)`?

`(a b c)`,
    porque `(a b c)` es el primer expresión-S de esa lista que no es vacia.
    
-----------------

Que es el `car` de `l` cuando `l` es `salchicha`?

no responde,
    porque no puede preguntar por el `car` de un atomo.

-----------------

Que es el `car` de `l` cuando `l` es `()`?

no responde,
    porque no puedes preguntar por el `car` de una lista vacia.
    
-----------------

La Regla de Car
   La primitiva `car` tiene definición solo para listas que no son vacias.

-----------------

Que es el `car` de `l` cuando `l` es `(((salchichas))(y)(pickle) repollo)`

((salchichas)),
   leer como: "la lista de la lista de salchichas"
   `((salchichas))` es la pirmera expreción-S de `l`.

-----------------

Que es `(car l)` cuando `l` es `(((salchichas))(y)(pickle) repollo)`

`((salchichas))`,
    porque `(car l)` es otro forma para preguntar "el `car` de la lista `l`."

-----------------

Que es `(car (car l))` cuando `l` es `(((salchichas))(y))`

`(salchichas)`.

-----------------

Que es el `cdr` of `l` cuando `l` es `(a b c)`

`(b c)`
    porque `(b c)` es la list `l` sin `(car l)`.

"cdr" se llama cuder

-----------------

Que es el `cdr` de `l` cuando `l` es `(hamberguesa)`

().

-----------------

que es `(cdr l)` cuando `l` es `((x) t r)`

`(t r)`
    porque `(cdr l)` es solo otra forma de preguntar por "el `cdr` de la lista `l`".

-----------------

Que es `(cdr a)` cuando `a` es `salchichas`

No responde,
    no puede preguntar por el `cdr` de un atomo.

-----------------

Que es `(cdr l)` cuando `l` is `()`

No responde.
   no puede preguntar por el `cdr` de la lista null.

-----------------

La Regla de Cdr
   La primitiva `cdr` tiene definición solo para listas que no son vacias. El `cdr` de una lista que no es vacia siempre es otra lista.

-----------------

Que es `(car (cdr l))` cuando `l` es `((b)(x y)((c)))`

`(x y)`,
    porque `((x y)((c)))` es `(cdr l)`, y `(x y)` es el `car` de `(cdr l).

-----------------

Que es `(cdr (cdr l))` cuando `l` es `((b)(x y)((c)))`

`(((c)))`,
    porque `((x y)((c)))` es `(cdr l)`, y `(((c)))` es el `cdr` de `(cdr l)`.
    
-----------------

Que es `(cdr (car l))` cuand `l` es `(a (b (c)) d)`

No responde,
   porque `(car l)` es un atomo, y `cdr` solo tiene definicion por listas. Veas La Regla de Cdr.

-----------------

Que acepta `car` por un argumento?

`car` acepta cualquier lista que no es vacia.

-----------------

Que acepta `cdr` por un argumento?

`cdr` acepta cualquier lista que no es vacia.

-----------------

Que es el `cons` de el atomo `a` y la lista `l` cuando `a` es `mani` y `l` es `(manteca y marmelada)`. Eso puede ser escrito "(cons a l)". leas como "cons el atomo a encima la lista l".

`(mani manteca y marmelada)`
    porque `cons` construye una lista. El primer argumento es en el frente de nueva lista.
    
-----------------

Que es el `cons` of `s` y `l` cuando `s` es `(banana y)` y `l` es `(mani manteca y marmelada)`

`((banana y) mani manteca y marmelada)`
    porque `cons` construye nueva lista, y puede hacer cualquier expreción-S en el frente de la nueva lista.

-----------------

Que es `(cons s l)` cuando `s` es `((ayudame) eso)` y `l` es `(es muy ((dificil) para aprender))`

`(((ayudame) eso) es muy ((dificil) para aprender))`.

-----------------

Que acepta `cons` por su argumentos?

`cons` acepta dos argumentos. El primer es cualquier expresión-S, y la segunda es cualquir lista.

-----------------

Que es `(cons s l)` cuando `s` es `(a b (c))` y `l` es ()

`((a b (c)))`
    porque `()` es una lista.

-----------------

Que es `(cons s l)` cuando `s` is `a` y `l` es `()`

`(a)`.

-----------------

Que es `(cons s l)` cuando `s` es `((a b c))` y `l` es `b`

No responde,
   porque el secundo argumento `l` necesita ser una lista.

-----------------

Que es `(cons s l)` cuando `s` is `a` y `l` es `b`

No responde. Porque?

-----------------

La Regla de Cons

   La primitiva `cons` toma dos argumentos. La segunda argumento por `cons` debe ser una lista. El resulto es una lista.

-----------------

Que es `(cons s (car l))` cuando `s` es `a` y `l` es `((b) c d)`

`(a b)`.
   porque?

-----------------

Que es `(cons s (cdr l))` cuando `s` es `a` y `l` es `((b) c d)`

`(a c d)`.
    porque?

-----------------

Es verdad que la lista `l` es la lista null cuando `l` es `()`

Sí,
    porque eso es la lista con cero expreciónes'S. Eso pregunta tambien pueden estar escrito `(null? l)`.

-----------------

Que es `(null? (quote ()))`

Verdad,
    porque `(quote ())` es un forma para escribir la lista null.
    
-----------------

Es `(null? l)` verdad o falso cuando `l` es `(a b c)`

Falso,
    porque `l` es un lista que no es vacia.

-----------------

Es `(null? a)` verdad o falso cuando `a` es `spaghetti`

No responde,
    porque no puedes preguntar `null?` de un atomo.
    
-----------------

La Regla de Null?
    La primitiva `null?` tiene definition solo para listas.

-----------------

Es verdad o falso que `s` es un atomo cuando `s` es `Harry`

Verdad,
    porque `Harry` es un hilo de caracteres iniciando con una letra.

-----------------

Es `(atom? s)` verdad o falso cuando `s` es `Harry`

Verdad,
    porque `(atom? s)` es otra forma de preguntar "Es `s` un atomo?"

-----------------

Es `(atom? s)` verdad o falso cuando `s` es `(Harry tiene una pila de manzanas)`

Falso,
   porque `s` es una lista.

-----------------

Cuantos argumentos acepta `atom?` y que son?

Acepta un argumento. El argumento puede ser cualquier expresión-S.

-----------------

Es `(atom? (car l))` verdad o falso cuando `l` es `(Harry tiene una pila de manzanas)`

Verdad,
    porque `(car l)` es `Harry`, y `Harry` es un atomo.

-----------------

Es `(atom? (cdr l))` verdad o falso cuando `l` es `(Harry tiene una pila de manzanas)`

Falso.

-----------------

Es `(atom? (cdr l))` verdad o falso cuando `l` es `(Harry)`

Falso,
    porque la lista `()` no es un atomo.

-----------------

Es `(atom? (car (cdr l)))` verdad o falso cuando `l` es `(uno dos tres cuatro)`

Verdad,
   porque `(cdr l)` es `(dos tres cuatro)` y `(car (cdr l))` es `dos`. `dos` es un atomo.

-----------------

Es `(atom? (car (cdr l)))` verdad o falso cuando `l` es `(uno (dos tres) cuatro)`

Falso,
    porque `(cdr l)` es `((dos tres) cuatro)`, y `(car (cdr l))` es `(dos tres)`. `(dos tres)` es una lista, no un atomo.

-----------------

Verdad o falso, `a1` y `a2` son lo mismo atomo cuando `a1` es `Harry` y `a2` es `Harry`

Verdad,
   porque `a1` es el atomo `Harry` y `a2` es el atomo `Harry`.

-----------------

Is `(eq? a1 a2)` verdad o falso cuando `a1` es `Harry` y `a2` es `Harry`

Verdad,
    porque `(eq? a1 a2)` es otra forma de preguntar, "`a1` y `a2` son lo mismo non-numero atomo?"
    
-----------------

Es `(eq? a1 a2)` verdad o falso cuando `a1` es `margarina` y `a2` es `mantequilla`?

False,
    porque `a1` y `a2` son atomos diferentes.
    
-----------------

Cuantos argumentos acepta `eq?` y que son?

Acepta dos argumentos. Los dos necesita ser atomos, y no pueden ser numeros.

-----------------

Es `(eq? l1 l2)` verdad o falso cuando `l1` es `()` y `l2` es `(fresa)`

No responde,
    `()` y `(fresa)` son listas.

-----------------

Es `(eq? n1 n2)` verdad o falso cuando `n1` es `6` y `n2` es `7`

No responde,
   `6` y `7` son numeros.
   
-----------------

La Regla de Eq?
   La primitiva `eq?` toma dos argumentos. Cada necesita ser un atom, y no pueden ser numero.

-----------------

Es `(eq? (car l) a)` verdad o falso cuando `l` es `(Mary tiene carne de vaca)` y `a` es `Mary`

Verdad,
    porque `(car l)` es el atomo `Mary`, y el argumento `a` es tambien el atomo `Mary`.
    
-----------------

Es `(eq? (cdr l) a)` verdad o falso cuando `l` es `(acido lactico)` y `a` es `lactico`

No responde,
    Miras La Reglas de Eq? y Cdr.

-----------------

Es `(eq? (car l) (car (cdr l)))` verdad o falso cuano `l` es `(frijoles frijoles necesitamos frijoles dulces)`

Verdad,
    porque es un comparación de el primer y segundo atomos en la lista.

-----------------



Capitulo 2.
Hacelo, Hacelo otra vez, y otra vez, y otra vez...

-----------------

Verdad o falso: `(lat? l)` cuando `l` es `(Juan Rollo no puede comer mas pollo)`

Verdad,
    porque cada expreción-S en `l` es un atomo.

-----------------

Verdad o falso: `(lat? l)` cuando `l` es `((Juan) Rollo no puede comer mas pollo)`

Falso,
    porque `(car l)` es una lista.

-----------------

Verdad o falso: `(lat? l)` cuando `l` es `(Juan (Rollo no) puede comer mas pollo)`

Falso,
    porque uno d los expreciónes-S en `l` es una lista.

-----------------

Verdad o falso: `(lat? l)` cuando `l` es `()`

Verdad,
    porque no hay lista adentro

-----------------

Verdad o falso: una lat es una lista de atomos?

Verdad!
    Cada lat es una lista de atomos!

-----------------

Escribe el función `lat?` usando unos, pero no necesariamente todo, de esos funciónes: `car` `cdr` `cons` `null?` `atom?` y `eq?`

No tenemos expectacion que puedes hacer eso todavia. Porque faltas unos ingredientes. Haces los siguentes preguntas. Buena suerte.

-----------------

Estas descansado?

-----------------

```
(define lat?
  (lambda (l)
    (cond
      ((null? l) #t)
      ((atom? (car l)) (lat? (cdr l)))
      (else #f))))
```
Que es el valor de `(lat? l)` cuando `l` es el argumento `(panzeta y huevos)`

`#t`.
    Eso aplicación `(lat? l)` cuando `l` es `(panzeta y huevos)` tiene el valor `#t` -- verdad -- porque `l` es un lat.

-----------------

Como podemos saber es `#t` por la aplicación `(lat? l)`

No tenemos expectacion que puedes hacer eso tampoco.
Sabemos porque podemos ver que preguntas lat?.
Estrategia: Escribe la definición del función `lat?` y ver eso por las siguentes preguntas.

-----------------

Que es la primera pregunta de `(lat? l)`

`(null ?)`

recuerda:
  `(cond ...)` para iniciar las preguntas;
  `(lambda ...)` crea una función; y
  `(define ...)` da una nombre.

-----------------

Que significa la linea 
  `((null? l) #t)`
cuando
  `l` es `(panzeta y huevos)`

`(null? l)` pregunta si el argumento `l` es la lista null. Si es, el valor de el aplicación es verdad `#t`. Si no, preguntamos la proxima pregunta. En eso caso, `l` no es la lista null, entonces preguntamos la proxima pregunta.

-----------------

Que es la proxima pregunta?

`(atom? (car l))`

-----------------

Que significa la linea
  `((atom? (car l)) (lat? (cdr l)))`
cuando
  `l` es `(y huevos)`

`(atom? (car l))` pregunta si `(car l)` es un atomo. Si es un atomo, el valor de la aplicación es `(lat? (cdr l))`. Si no, preguntamos la proxima pregunta. en eso caso `(car l)` es un atomo, entonces queiremos saber si el resto de la lista `l` es solo atomos.

-----------------

Que significa `(lat? (cdr l))`

`(lat? (cdr l))` es para saber si el resto de la lista `l` solo tiene atomos. Estamos usando el funcion `lat?` otra vez, pero eso ves, con el argumento `(cdr l)`, cual es `(huevos)`.

-----------------

Que es la proxima pregunta?

`(null? l).

-----------------

Que es la significa de la linea
  `((null? l) #t)`
cuando
  `l` es ahora `(huevos)`

`(null? l)` pregunta si el argumento `l` es la lista null. Si es, el valor de el aplicación es `#t` -- verdad. Si no, vamos a la proxima pregunta. En eso caso, `l` no es null, entonces vamos a la proxima pregunta.

-----------------

Que es la proxima pregunta?

`(atom? (car l))`.

-----------------

Que significa la linea
  `((atom? (car l)) (lat? (cdr l)))`
cuando
  `l` es `(huevos)`

`(atom? (car l))` pregunta si `(car l)` es un atomo. Si es un atomo, el valor de la aplicación es `(lat? (cdr l))`. Si `(car l)` no es un atomo, preguntamos la proxima pregunta. En eso caso, `(car l)` es un atomo, entonces, otro vez vamos a ver `(lat? (cdr l))`

-----------------

Que significa `(lat? (cdr l))`

`(lat? (cdr l))` pregunta si el resto de la lista `l` solo tiene atomos. Usa el función `lat?`, con `l` transformando hasta el valor de `(cdr l)`.

-----------------

Ahora, que es el argumento por `lat?`

`()`.

-----------------

Que significa la linea
  `((null? l) #t)`
cuando
  `l` es ahora `()`

`(null? l)` pregunta si `l` es la lista null. Si es, el valor de el aplicación es el valor #t. Si no, preguntamos la proxima pregunta. En eso caso, () es la lista null. Entonces, el valor de la aplicación `(lat? l)` cuando
  `l` es `(panzeta y huevos)`, es #t --- verdad.

-----------------

Recuerdas la preguntas sobre `(lat? l)`

Problamente no. La aplicación `(lat? l)` tiene el valor de #t cuando la lista `l` es una lista de atomos cuando `l` es `(panzeta y huevos)`.

-----------------

Puedes usar tu proprio palabras para explicar que hace `lat?`?

Aca son nuestro palabras:
  "`lat?` vea cada expresión-S en la lista. Pregunta si cada es un atomo, hasta que no hay mas. Si todo son atomos, el resulto es `#t`. Si encuentra una lista, el resulto es `#f` --- falso."
Ahora vamos a ver un ejemplo que resulto en falso.

-----------------

Aca es el función `lat?` otra vez:
```
(define lat?
  (lambda (l)
    (cond
      ((null? l) #t)
      ((atom? (car l)) (lat? (cdr l)))
      (else #f))))
```
Que es el valor de `(lat? l)` cuando
  `l` es `(panzeta (y huevos))`

#f,
  porque la lista `l` tiene un expresión-S adentro que es una lista.

-----------------

que es la primer pregunto?

`(null? l)`.

-----------------

Que es la significa de la linea
  `((null? l) #t)`
cuando `l` es `(panzeta (y huevos))`

`(null? l)` pregunta si `l` es la lista null. Si eso es la lista null, el valor es `#t`. Si `l` no es la lista null, vamos a la proxima pregunta. En ese caso, no es null, entonces, preguntamos la proxima pregunta.

-----------------

Que es la proxima pregunta?

    `(atom? (car l))`

-----------------

Que es la significa de la linea
    `((atom? (car l)) (lat? (cdr l)))`
cuando
    `l` es `(panzeta (y huevos))`

`(atom? (car l))` preguntas si `(car l)` es un atomo. Si es un atomo, el valor es `(lat? (cdr l))`. Si no es un atomo, vamos a la proxima pregunta. En ese caso, `(car l)` es un atomo, entonces vamos a ver si el resto de la lista `l` solo tiene atomos adrentro.

-----------------

Que significa `(lat? (cdr l))`

`(lat? (cdr l))` ver para saber si el resto de la lista `l` solo tiene atomos adrentro, eso vez usamos `(cdr l)` in lugar de `l`.

-----------------

Que significa la linea `((null? l) #t)` cuando `l` ahora es `((y huevos))`

`(null? l)` pregunta si `l` es la lista null. Si es null, el resulto es `#t`. Si no es null, vamos a la proxima pregunta. En eso caso, `l` no es null, entonces vamos a la proxima pregunta.

-----------------

Que es la proxima pregunta?

`(atom? (car l))`

-----------------

Que significa de la linea `((atom? (car l)) (lat? (cdr l)))` cuando `l` es ahora `((y huevos))`

`(atom? (car l))` pregunta si `(car l)` es un atomo. Si es un atomo, el valor es `(lat? (cdr l))`. Si no es, vamos a la proxima pregunta. En eso caso, `(car l)` no es un atomo, entonces vamos la proxima pregunta.

-----------------

Que es la proxima pregunta?

`else`.

-----------------

Que significa la pregunta `else`?

`else` significa verdad.

-----------------

`else` significa verdad?

Sí, porque la pregunta `else` es siempre verdad!

-----------------

`else`

verdad.

-----------------

Porqué `else` es la ultima pregunta?

Porque no necisitamos nada mas preguntas.

-----------------

Porqué no necesitams nada mas preguntas?

Porque una lista puede estar vacio, puede tener un atomo en la primera posición, o puede tener una lista en la primera posición.

-----------------

que significa la linea `(else #f)`

`else` es siempre verdad, entonces el resulto es `#f`.

-----------------

Que es `)))`

Son parentesis para cerrar `(cond`, `(lambda`, y `(define`. Ellos son en el inicio de la definición.

-----------------

Puede explicar como determinamos el valor `#f` por `(lat? l)` cuando `l` es `(panzeta (y huevos))`

Aca es una forma decir eso:
  "`(lat? l) mira cada argumento en `l` para saber si es un atomo. Si ya miró cada argumento, y no encontra un lista, `(lat? l)` es `#t`. Si encontra una lista, como pasa en ejemplo `(panzeta (y huevos))`, el valor de `(lat? l)` es `#f`.
  
-----------------

"or" es la palabra en inglés por "o".

Es `(or (null? l1) (atom? l2))` verdad o falso cuando `l1` es `()` y `l2` es `(d e f g)`

Verdad,
  porque `(null? l1)` es verdad cuando `l1` es `()`.

-----------------

Es `(or (null? l1) (null? l2))` verdad o false cuando `l1` es `(a b c)` y `l2` es `()`

Verdad,
   porque `(null? l2)` es verdad cuando `l2` es `()`.
   
-----------------

Es `(or (null? l1) (null? l2))` verdad o false cuando `l1` es `(a b c)` y `l2` es `(atom)`

Falso,
    porque `(null? l1)` y `(null? l2)` no son verdades cuando `l1` es `(a b c)` y `l2` es `(atom)`.
    
-----------------

Que hace `(or ...)`?

Hace dos preguntas, uno y despues el otro. Si uno es verdad, termina y el resultado es verdad. Si la primer no es verdad, vamos a la segunda pregunta y el resultado es el resultado de la seguda pregunta.

-----------------

